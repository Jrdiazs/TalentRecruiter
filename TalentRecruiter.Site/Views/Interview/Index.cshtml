@model TalentRecruiter.Site.Models.SelectedCandidatesViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12">
        <table id="assets-data-table" class="table table-striped table-bordered table-responsive nowrap" style="width:100%;">
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-10">
        <button type="button" class="btn btn-link" id="bttnBack">Atras</button>
    </div>
</div>

<!-- Modal mensajes -->
<div class="modal fade" id="modalMessage" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Info</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="pmesage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para guardar la entrevista -->

<div id="modalInterView" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">InterView Create</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">

                    <form name="interview" id="interview">
                        <input type="hidden" name="InterviewId" id="InterviewId" />
                        <input type="hidden" name="CandidateId" id="CandidateId" />
                        <input type="hidden" name="TechnologyDetailId" id="TechnologyDetailId" />
                        <input type="hidden" name="TechnologyDetailDescription" id="TechnologyDetailDescription" />
                        <input type="hidden" name="CandidateName" id="CandidateName" />
                        <input type="hidden" name="UserName" id="UserName" />
                        <input type="hidden" name="CandidateEmail" id="CandidateEmail" />
                        <input type="hidden" name="Street" id="Street" />
                        <input type="hidden" name="Suite" id="Suite" />
                        <input type="hidden" name="City" id="City" />
                        <input type="hidden" name="ZipCode" id="ZipCode" />
                        <input type="hidden" name="GeoLat" id="GeoLat" />
                        <input type="hidden" name="GeoIng" id="GeoIng" />
                        <input type="hidden" name="Phone" id="Phone" />
                        <input type="hidden" name="Website" id="Website" />
                        <input type="hidden" name="CompanyName" id="CompanyName" />
                        <input type="hidden" name="CompanyCatchPhrase" id="CompanyCatchPhrase" />
                        <input type="hidden" name="CompanyBs" id="CompanyBs" />

                        <div class="form-group">

                            <label for="InterviewStartTime" class="control-label col-md-2">Start Time</label>

                            <div class="col-md-10">
                                <input type="text" class="form-control" name="InterviewStartTime" id="InterviewStartTime" required />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="InterviewFinalTime" class="control-label col-md-2">End Time</label>
                            <div class="col-md-10">
                                <input type="text" class="form-control" name="InterviewFinalTime" id="InterviewFinalTime" required />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="TypeInterviewId" class="control-label col-md-2">Type InterView</label>
                            <div class="col-md-10">
                                <select id="TypeInterviewId" name="TypeInterviewId" class="form-control" required></select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="Observation" class="control-label col-md-2">Observation</label>
                            <div class="col-md-10">
                                <input id="Observation" name="Observation" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">

                            <label class="control-label col-md-2">Tecnologia</label>
                            <div class="col-md-10">
                                <span id="lblTechnologyDetailDescription"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="lblCandidateId" class="control-label col-md-2">Id</label>
                            <div class="col-md-10">
                                <span id="lblCandidateId"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="lblCandidateName" class="control-label col-md-2">Candidate Name</label>
                            <div class="col-md-10">
                                <span id="lblCandidateName"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="lblCandidateEmail" class="control-label col-md-2">Email</label>
                            <div class="col-md-10">
                                <span id="lblCandidateEmail"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="lblPhone" class="control-label col-md-2">Phone</label>
                            <div class="col-md-10">
                                <span id="lblPhone"></span>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" id="bttnSave" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{

    <script type="text/javascript">
        var interviewVM;
        var tableVM;
        var candidates;
        var rowIndexSelected = -1;

        $(document).ready(function () {

            candidates = GetCandidatesFromStorage();

            console.log(candidates);

            interviewVM = {
                table: null,
                init: function () {
                    table = $('#assets-data-table').DataTable({
                        "bPaginate": false,
                        "bFilter": false,
                        "serverSide": false,
                        "processing": true,
                        "data": candidates,
                        "columns": [
                            { "title": "Interview Id", "data": "InterviewId", "visible": false, "searchable": false },
                            { "title": "Type Interview Id", "data": "TypeInterviewId", "visible": false, "searchable": false },
                            { "title": "Street", "data": "Street", "searchable": false, "visible": false },
                            { "title": "Suite", "data": "Suite", "searchable": false, "visible": false },
                            { "title": "City", "data": "City", "searchable": false, "visible": false },
                            { "title": "ZipCode", "data": "ZipCode", "searchable": false, "visible": false },
                            { "title": "GeoLat", "data": "GeoLat", "searchable": false, "visible": false },
                            { "title": "GeoIng", "data": "GeoIng", "searchable": false, "visible": false },
                            { "title": "Phone", "data": "Phone", "searchable": false, "visible": false },
                            { "title": "Website", "data": "Website", "searchable": false, "visible": false },
                            { "title": "CompanyName", "data": "CompanyName", "searchable": false, "visible": false },
                            { "title": "CompanyCatchPhrase", "data": "CompanyCatchPhrase", "searchable": false, "visible": false },
                            { "title": "CompanyBs", "data": "CompanyBs", "searchable": false, "visible": false },

                            { "title": "Technology Detail Id", "data": "TechnologyDetailId", "visible": false, "searchable": false },
                            {
                                "title": "Start Time", "data": "InterviewStartTime", "searchable": false, "render": function (data, type, full, meta) {
                                    return moment(data).format("YYYY-MM-DD HH:mm");;
                                }
                            },
                            {
                                "title": "Final Time", "data": "InterviewFinalTime", "searchable": false, "render": function (data, type, full, meta) {
                                    return moment(data).format("YYYY-MM-DD HH:mm");;
                                }
                            },
                            { "title": "Technology Description", "data": "TechnologyDetailDescription", "searchable": false },
                            { "title": "Observation", "data": "Observation", "visible": false, "searchable": false },
                            { "title": "Candidate Id", "data": "CandidateId", "searchable": false },
                            { "title": "Name", "data": "CandidateName", "searchable": false },
                            { "title": "User Name", "data": "UserName", "searchable": false },
                            { "title": "Email", "data": "CandidateEmail", "searchable": false },
                            {
                                "title": "Actions",
                                "data": "InterviewId",
                                "searchable": false,
                                "sortable": false,
                                "render": function (data, type, full, meta) {

                                    return '<span class="glyphicon glyphicon-pencil" data-toggle="tooltip" title="Editar" onclick="ShowModalInfo(' + meta.row + ')" style="cursor:pointer" aria-hidden="true"></span>';
                                }
                            }
                        ]

                    });
                    tableVM = table;
                },

            }

            interviewVM.init();

            ///Incializa eventos en el formulario
            InitFormInterViewModal();

        })

        ///Inicializa los valores de formulario
        ///Carga datos en combos
        ///Carga calendarios
        function InitFormInterViewModal()
        {
            jQuery.validator.setDefaults({
                debug: true,
                success: "valid"
            });

            $("#interview").validate({
                rules: {
                    Observation: {
                        required: false,
                        maxlength: 20
                    },
                    InterviewStartTime:{
                        required: true,
                        maxlength: 16
                    },
                    InterviewFinalTime: {
                        required: true,
                        maxlength: 16
                    },
                    TypeInterviewId:{
                        required: true
                    }
                }
            });

            $('[data-toggle="tooltip"]').tooltip();

            CreateCalendarInterView();
            LoadTypeInterViewDrop();
            EventSaveInterView();
        }
        ///Convierte un string con este formato /Date(1597029720000)/ a Date
        function StringToDate(dateStr)
        {
            var date = new Date(parseInt(dateStr.replace("/Date(", "").replace(")/", ""), 10));
            return date;
        }

        //Carga el drop con los datos de los tipos de entrevistas de la base de datos
        function LoadTypeInterViewDrop()
        {
            $.ajax({
                url: "@Url.Action("GetInterviewTypes", "Interview")",
                dataType: 'json',
                type: 'GET',
                success: function (response) {

                    if (response)
                    {
                        var options = "";
                        $.each(response, function (key, value) {
                            options += '<option value="' + value.TypeInterviewId + '">' + value.TypeInterviewDescripction + '</option>';
                        });
                        $("#TypeInterviewId").html(options);
                    }

                },
                error: function (x, e) {
                    console.log(e);
                    ShowMessageErrorModal("Error load drop type Interview");
                }

            });
        }

        ///Inicializar los calendarios de la entrevista
        function CreateCalendarInterView()
        {

            $('#InterviewStartTime').datetimepicker({
                format: 'Y-m-d H:i',
                onShow: function (ct) {

                },
                onChangeDateTime: function (dp, $input) {
                    var finalTime = $('#InterviewStartTime').val();
                    finalTime = finalTime.substring(0, 10);

                    var selectDate = moment(dp).format("YYYY-MM-DD HH:mm");

                    if (selectDate != finalTime)
                        $('#InterviewFinalTime').val(selectDate);
                }
            });
            $('#InterviewFinalTime').datetimepicker({
                format: 'Y-m-d H:i',
                onShow: function (ct) {
                    var dateSelect = $('#InterviewStartTime').val();
                    dateSelect = dateSelect.substring(0, 10);
                    dateSelect = moment(dateSelect);
                    dateSelect = moment(dateSelect).format("YYYY/MM/DD");
                    this.setOptions({
                        minDate: dateSelect
                    })
                }

            });
        }

        ///Obtiene los candidatos guardados en el local storage guardado de la vista anterior
        function GetCandidatesFromStorage() {
            var jsonCandidates = localStorage.getItem("candidates");
            candidates = JSON.parse(jsonCandidates);
            return candidates;
        }

        ///Muesta un mensaje de error en una ventana modal
        function ShowMessageErrorModal(mensaje) {
            $("#pmesage").html(mensaje);
            $("#modalMessage").modal()
        }

        ///Limpia el mensaje de error de la ventana modal
        function CleaningErrorModal() {
            ShowMessageErrorModal("");
        }

        ///Muestra el candidato en la ventana modal para editarlo
        function ShowModalInfo(rowIndex)
        {
            console.log(rowIndex);
            rowIndexSelected = rowIndex;
            var candidateInterView = tableVM.row(rowIndex).data();

            ShowCandidateForm(candidateInterView);
            $("#modalInterView").modal()

        }
        //Limpiar el Formulario de entrevistas
        function ResetForm()
        {
            $("#Observation").val("");
        }
        ///Muestra los datos del candidato en el formulario
        function ShowCandidateForm(candidateInterView)
        {
            console.log("para mostrar el formulario")
            console.log(candidateInterView);

            var interviewStartTime = ConvertDateToString(candidateInterView.InterviewStartTime, "YYYY-MM-DD HH:mm");
            var interviewFinalTime = ConvertDateToString(candidateInterView.InterviewFinalTime, "YYYY-MM-DD HH:mm");

            $("#InterviewStartTime").val(interviewStartTime);
            $("#InterviewFinalTime").val(interviewFinalTime);

            if (candidateInterView.InterviewId == 0)
            {
                var date = MaxTimeFinalInterview();
                if (date != null)
                {
                    $("#InterviewStartTime").val(date);
                    $("#InterviewFinalTime").val(date);
                }

            }

            $("#InterviewId").val(candidateInterView.InterviewId);
            $("#CandidateId").val(candidateInterView.CandidateId);
            $("#TechnologyDetailId").val(candidateInterView.TechnologyDetailId);
            $("#TechnologyDetailDescription").val(candidateInterView.TechnologyDetailDescription);
            $("#CandidateName").val(candidateInterView.CandidateName);
            $("#UserName").val(candidateInterView.UserName);
            $("#CandidateEmail").val(candidateInterView.CandidateEmail);
            $("#Street").val(candidateInterView.Street);
            $("#Suite").val(candidateInterView.Suite);
            $("#City").val(candidateInterView.City);
            $("#ZipCode").val(candidateInterView.ZipCode);
            $("#GeoLat").val(candidateInterView.GeoLat);
            $("#Observation").val(candidateInterView.Observation);
            $("#GeoIng").val(candidateInterView.GeoIng);
            $("#Phone").val(candidateInterView.Phone);
            $("#Website").val(candidateInterView.Website);
            $("#CompanyName").val(candidateInterView.CompanyName);
            $("#CompanyCatchPhrase").val(candidateInterView.CompanyCatchPhrase);
            $("#CompanyBs").val(candidateInterView.CompanyBs);
            $("#CompanyName").val(candidateInterView.CompanyName);
            $("#lblTechnologyDetailDescription").text(candidateInterView.TechnologyDetailDescription);
            $("#lblCandidateId").text(candidateInterView.CandidateId);
            $("#lblCandidateName").text(candidateInterView.CandidateName);
            $("#lblCandidateEmail").text(candidateInterView.CandidateEmail);
            $("#lblPhone").text(candidateInterView.Phone);
            $('#TypeInterviewId').val(candidateInterView.TypeInterviewId);

        }

        ///Consulta la maxima fecha final
        function MaxTimeFinalInterview()
        {
            var date = null;
             $.ajax({
                url: "@Url.Action("MaxTimeFinalInterview", "Interview")",
                 dataType: 'json',
                async: false,
                type: 'POST',
                success: function (response) {

                    if (response)
                    {
                        var newdate = StringToDate(response);
                        date = ConvertDateToString(newdate, "YYYY-MM-DD HH:mm");
                    }

                },
                error: function (x, e) {
                    console.log(x);

                    if (x.status != 200)
                        ShowMessageErrorModal("Error MaxTimeFinalInterview");
                }

             });

            return date;
        }

        ///Evento Boton Guardar Entrevista
        function EventSaveInterView()
        {
            $("#bttnSave").click(function ()
            {
                SaveInterView();
            });
        }

        function SaveInterView()
        {
            var interView = $('#interview').serialize();

            var valid = $('#interview').valid();

            if (valid)
            {
                $.ajax({
                url: "@Url.Action("SaveInterView", "Interview")",
                type: 'POST',
                dataType: "json",
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                success: function (response) {
                    console.log(response);
                    if (!response.Succes)
                    {
                        $("#modalInterView").modal('hide');
                        ShowMessageErrorModal(response.MessageInfo);
                        return;
                    }

                    if (response.Succes)
                    {
                        $("#modalInterView").modal('hide');
                        ShowMessageErrorModal(response.MessageInfo);
                        UpdateRowInfo(response.Value);
                        ResetForm();
                        return;
                    }

                },
                fail: function (error)
                {
                    console.log(error);
                    ShowMessageErrorModal(error.error);

                },
                data: interView
            });
            }

        }

        ///Actualiza los datos de la grilla
        function UpdateRowInfo(interview)
        {
            var interviewStartTime = StringToDate(interview.InterviewStartTime);
            var interviewFinalTime = StringToDate(interview.InterviewFinalTime)

            interviewStartTime = moment(interviewStartTime).toISOString();
            interviewFinalTime = moment(interviewFinalTime).toISOString();

            var data = {
                CandidateEmail: interview.CandidateEmail,
                CandidateId: interview.CandidateId, CandidateName: interview.CandidateName,
                City: interview.City, CompanyBs: interview.CompanyBs, CompanyCatchPhrase: interview.CompanyCatchPhrase,
                CompanyName: interview.CompanyName, GeoIng: interview.GeoIng,
                GeoLat: interview.GeoLat, InterviewFinalTime: interviewFinalTime, InterviewId:interview.InterviewId,
                InterviewStartTime: interviewStartTime, Observation: interview.Observation, Phone: interview.Phone, Street: interview.Street,
                Suite: interview.Suite, TechnologyDetailDescription:interview.TechnologyDetailDescription,
                TechnologyDetailId: interview.TechnologyDetailId, TypeInterviewId: interview.TypeInterviewId,
                UserName: interview.UserName, Website: interview.Website, ZipCode: interview.ZipCode
            };

            let columns = tableVM.settings().init().columns;
            //Cambia los valores de la grilla
            tableVM.columns().every(function (colindex) {
                let coldata = columns[colindex].data;
                tableVM.cell({ row: rowIndexSelected, column: colindex }).data(data[coldata])
            });
            //Guarda los nuevos candidatos en el storage
            SaveStorage();

        }

        ///Convierte un date a string
        function ConvertDateToString(date, format) {
            var strValue = "";
            if (date instanceof Date)
            {
                strValue = moment(date).format(format);
            }
            if (typeof date === 'string')
            {
                var newdate = moment(date);
                strValue = newdate.format(format);
            }

            return strValue;
        }

        ///Guarda los candidatos en el local storage
        function SaveCandidatesLocalStorage(candidates) {
            CleaningLocalStorageCandidates();
            SaveCandidatesSelec(candidates);
        }

        function SaveStorage()
        {
            var candidates = GetCandidateFromGrid();
            SaveCandidatesLocalStorage(candidates);
        }

        ///Obtiene los candidatos de la grilla
        function GetCandidateFromGrid() {
            var candidatesFromGrid = tableVM.rows().data().toArray();
            return candidatesFromGrid;
        }

        ///Elimina los candidatos seleccionados guardados en el local storage si es que existen
        function CleaningLocalStorageCandidates() {
            localStorage.removeItem("candidates");
        }

        /// Guarda los candidatos seleccionados en la grilla
        function SaveCandidatesSelec(candidates) {
            localStorage.setItem("candidates", JSON.stringify(candidates));
        }
    </script>
}